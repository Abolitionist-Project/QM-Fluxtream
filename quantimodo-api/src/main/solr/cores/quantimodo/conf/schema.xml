<?xml version="1.0" encoding="UTF-8" ?>
<!--  
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml

 PERFORMANCE NOTE: this schema includes many optional features and should not
 be used for benchmarking.  To improve performance one could
  - set stored="false" for all fields possible (esp large fields) when you
    only need to search on the field but don't need to return the original
    value.
  - set indexed="false" if you don't need to search on the field, but only
    return the field as a result of searching on other indexed fields.
  - remove all unneeded copyField statements
  - for best index size and searching performance, set "index" to false
    for all general text fields, use copyField to copy them to the
    catchall "text" field, and use that for searching.
  - For maximum indexing performance, use the StreamingUpdateSolrServer
    java client.
  - Remember to run the JVM in server mode, and use a higher logging level
    that avoids logging every request
-->
<schema name="chatterbot" version="1.4">
  <!-- attribute "name" is the name of this schema and is only used for display purposes.
       Applications should change this to reflect the nature of the search collection.
       version="1.4" is Solr's version number for the schema syntax and semantics.  It should
       not normally be changed by applications.
       1.0: multiValued attribute did not exist, all fields are multiValued by nature
       1.1: multiValued attribute introduced, false by default 
       1.2: omitTermFreqAndPositions attribute introduced, true by default except for text fields.
       1.3: removed optional field compress feature
       1.4: default auto-phrase (QueryParser feature) to off
     -->

  <types>
    <!-- field type definitions. The "name" attribute is
       just a label to be used by field definitions.  The "class"
       attribute and any other attributes determine the real
       behavior of the fieldType.
         Class names starting with "solr" refer to java classes in the
       org.apache.solr.analysis package.
    -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>

    <!-- The optional sortMissingLast and sortMissingFirst attributes are
         currently supported on types that are sorted internally as strings
         and on numeric types.
	       This includes "string","boolean", and, as of 3.5 (and 4.x),
	       int, float, long, date, double, including the "Trie" variants.
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->    

    <!--
      Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.
    -->
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day
                      
         Consult the DateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
    <fieldType name="date" class="solr.TrieDateField" omitNorms="true" precisionStep="0" positionIncrementGap="0"/>

    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->

    <!-- One can also specify an existing Analyzer class that has a
         default constructor via the class attribute on the analyzer element
    <fieldType name="text_greek" class="solr.TextField">
      <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
    </fieldType>
    -->

    <!-- A text field with defaults appropriate for English, plus
	 aggressive word-splitting and autophrase features enabled.
	 This field is just like text_en, except it adds
	 WordDelimiterFilter to enable splitting and matching of
	 words on case-change, alpha numeric boundaries, and
	 non-alphanumeric chars.  This means certain compound word
	 cases will work, for example query "wi fi" will match
	 document "WiFi" or "wi-fi".  However, other cases will still
	 not match, for example if the query is "wifi" and the
	 document is "wi fi" or if the query is "wi-fi" and the
	 document is "wifi".
        -->
    <fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer type="index">

        <charFilter class="solr.HTMLStripCharFilterFactory" />

        <!-- ignores punctuations -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\p{Punct}" replacement=" "/>

        <!-- <tokenizer class="solr.ICUTokenizerFactory" /> -->
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>

        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true" />

        <filter class="solr.WordDelimiterFilterFactory" preserveOriginal="1" generateWordParts="1" catenateWords="1" generateNumberParts="1" catenateNumbers="1" />

        <filter class="solr.LengthFilterFactory" min="2" max="255" />

        <!-- Case insensitive stop word removal.
          add enablePositionIncrements=true in both the index and query
          analyzers to leave a 'gap' for more accurate phrase queries.
        -->
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords_en.txt"
                enablePositionIncrements="true"
                />

        <filter class="solr.LowerCaseFilterFactory"/>

        <!-- Protects words from being modified by stemmers.  -->
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>

        <filter class="solr.KStemFilterFactory"/>
        <!-- <filter class="solr.PorterStemFilterFactory"/> -->
        <!-- <filter class="solr.SnowballPorterFilterFactory"/> -->

        <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
             possible with WordDelimiterFilter in conjuncton with stemming. -->
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>

      </analyzer>
      <analyzer type="query">

        <charFilter class="solr.HTMLStripCharFilterFactory" />

        <!-- ignores punctuations -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\p{Punct}" replacement=" "/>

        <!-- <tokenizer class="solr.ICUTokenizerFactory" /> -->
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>

        <!-- <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true" tokenizerFactory="solr.KeywordTokenizerFactory" /> -->

        <filter class="solr.WordDelimiterFilterFactory" preserveOriginal="1" generateWordParts="1" generateNumberParts="1" />

        <filter class="solr.LengthFilterFactory" min="2" max="255" />

        <!-- Case insensitive stop word removal.
          add enablePositionIncrements=true in both the index and query
          analyzers to leave a 'gap' for more accurate phrase queries.
        -->
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords_en.txt"
                enablePositionIncrements="true"
                />

        <filter class="solr.LowerCaseFilterFactory"/>

        <!-- Protects words from being modified by stemmers.  -->
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>

        <filter class="solr.KStemFilterFactory"/>
        <!-- <filter class="solr.PorterStemFilterFactory"/> -->
        <!-- <filter class="solr.SnowballPorterFilterFactory"/> -->

        <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
             possible with WordDelimiterFilter in conjuncton with stemming. -->
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>

      </analyzer>
    </fieldType>

    <fieldType name="exact" class="solr.TextField" omitNorms="true">
      <analyzer>

        <!-- ignores punctuations -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\p{Punct}" replacement=" "/>

        <!-- treats consecutive white spaces as one -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="\s+" replacement=" "/>

        <!-- KeywordTokenizer does no actual tokenizing, so the entire
             input string is preserved as a single token
          -->
        <tokenizer class="solr.KeywordTokenizerFactory"/>

        <!-- The TrimFilter removes any leading or trailing whitespace -->
        <filter class="solr.TrimFilterFactory" />

        <!-- Ignore case -->
        <filter class="solr.LowerCaseFilterFactory"/>

      </analyzer>
    </fieldType>

    <!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  --> 
    <fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />

  </types>
  <fields>

    <field name="id" type="string" stored="true" indexed="true" required="true" />

    <field name="guestId" type="int" stored="true" indexed="true" required="true" />
    <!-- <field name="guestId" type="string" stored="true" indexed="true" required="true" /> -->
    
    <field name="value" type="float" stored="true" indexed="true" required="true" />
    <!-- <field name="value" type="string" stored="true" indexed="true" required="true" /> -->
    
    <field name="start_time_utc" type="date" stored="true" indexed="true" required="true" />
    <!-- <field name="start_time_utc" type="string" stored="true" indexed="true" required="true" /> -->

    <field name="duration_in_seconds" type="int" stored="true" indexed="true" />
    <!-- <field name="duration_in_seconds" type="string" stored="true" indexed="true" /> -->
    
    <field name="categoryName" type="string" stored="true" indexed="true" required="true" />
    
    <!-- custom fields (dynamic and multi-valued) -->
    <!-- <dynamicField name="*" type="string" indexed="true" stored="true" multiValued="true" /> -->

    <!-- catchall field, containing all other searchable text fields (implemented via copyField further on in this schema -->
    <field name="text" type="text_en_splitting" stored="false" indexed="true" multiValued="true" />

    <!-- system generated -->
    <field name="timestamp" type="date" stored="true" indexed="true" default="NOW" multiValued="false" />
    <field name="signature" type="string" stored="true" indexed="true" multiValued="false" />

    <!-- <field name="error" type="string" indexed="true" stored="true" /> -->

    <field name="ignored" type="ignored" />
    <dynamicField name="ignored.*" type="ignored" />

  </fields>

  <uniqueKey>id</uniqueKey>

  <defaultSearchField>text</defaultSearchField>

  <!-- <solrQueryParser defaultOperator="OR" /> -->

  <copyField source="*" dest="text" />

</schema>
